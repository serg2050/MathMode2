blagoveshensk_around = meteo_nearby_stations(lat_lon_df = blagoveshensk, station_data = station_data,
radius = 300, var = "TAVG",
year_min = 2006, year_max = 2011)
#создадим таблицу
all_data = tibble()
for (i in 1:length(blagoveshensk_around))
{
# Определим станцию:
blagoveshensk_id = blagoveshensk_around[["BLAGOVESHCHENSK"]][["id"]][i]
# Загрузим данные для станции:
data = meteo_tidy_ghcnd(stationid = blagoveshensk_id,
var="TAVG",
date_min="2006-01-01",
date_max="2011-12-31")
#объединим данные в таблице
all_data = bind_rows(all_data, data %>%
#добавим колонки для группировки по году и месяцу
mutate(year = year(date), month = month(date)) %>%
group_by(month, year) %>%
#найдем суммарную среднюю активную температуру по месяцу за каждый год для станции
summarise (tavg = sum(tavg[tavg>50], na.rm = TRUE)/10 )
)
}
# Изменения в таблице сохранятся в векторе clean_data.
clean_data = all_data %>%
# Добавим колонку month для группировки данных:
group_by(month) %>%
# Найдем месячный d и cумму активных тмператур для каждой станции:
summarise(s = mean(tavg, na.rm = TRUE)) %>%
#добавим данные из таблицы с показателем d
# Добавим колонки для расчета:
mutate (a = af, b = bf, d = df) %>%
# Рассчитаем урожайность для каждого месяца:
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Благовещенске в 2011 году составила (ц/га):
Yield = sum(clean_data$fert); Yield
View(station_data)
View(data)
View(all_data)
# Гайдуков Сергей создайте модель множественной линейной регрессии потоков дневных потоков
# паров воды за летний период 2013 года по данным измерений методом турбулентной пульсации
library("tidyverse")  #целая вселенная
library("readr")      #функция read_csv()
library("stringr")    #функция str_replace_all
library("dplyr")      #функции: filter(); arrange(); select(); mutate(); summarize(); group_by(); sample_n()
library("ggplot2")    #Графики функцией qplot()
#подключаем библиотеки
library("tidyverse")
library("stringr")
library("dplyr")
library("ggplot2")
#читаем данные из файла, пропускаем первую строку, заменяем текстовые 'NA', пустые и сгенерированные пороговые значения на NA, игнорируем строки с "["
eddypro = read_csv("eddypro.csv", skip = 1, na=c("","NA","-9999","-9999.0"), comment=c("["))
eddypro = eddypro[-1, ]
eddypro = select(eddypro, -(roll))
#преобразуем строковые значения в факторные
eddypro = eddypro %>% mutate_if(is.character, factor)
#заменяем конфликтующие знаки колонок
names(eddypro) = names(eddypro) %>%
str_replace_all("[!]", "_emph_") %>%
str_replace_all("[?]", "_quest_") %>%
str_replace_all("[*]", "_star_") %>%
str_replace_all("[+]", "_plus_") %>%
str_replace_all("[-]", "_minus_") %>%
str_replace_all("[@]", "_at_") %>%
str_replace_all("[$]", "_dollar_") %>%
str_replace_all("[#]", "_hash_") %>%
str_replace_all("[/]", "_div_") %>%
str_replace_all("[%]", "_perc_") %>%
str_replace_all("[&]", "_amp_") %>%
str_replace_all("[\\^]", "_power_") %>%
str_replace_all("[()]", "L_")
glimpse(eddypro)
# уберем na
eddypro = drop_na(eddypro)
#летний период, дневное время
eddypro = filter(eddypro, DOY >= 152 & DOY < 244)
eddypro = filter(eddypro, daytime==TRUE)
#переменные типов numeric и  не numeric отдельно
eddypro_numeric = eddypro[,sapply(eddypro,is.numeric) ]
eddypro_non_numeric = eddypro[,!sapply(eddypro,is.numeric) ]
#создадим выборки
row_numbers = 1:length(eddypro_numeric$h2o_flux)
teach = sample(row_numbers, floor(length(eddypro_numeric$h2o_flux)*.7))
test = row_numbers[-teach]
teaching_tbl = eddypro_numeric[teach,]
testing_tbl = eddypro_numeric[test,]
# МОДЕЛЬ 1 по обучающей выборке
mod1 = lm(h2o_flux~ (.) , data = teaching_tbl)
#коэффициенты
coef(mod1)
#остатки
resid(mod1)
#доверительный интервал
confint(mod1)
#P-значения по модели
summary(mod1)
#дисперсионный анализ
anova(mod1)
#графическое представление модели:
plot(mod1)
+ co2_flux + rand_err_h2o_flux + H_strg + co2_v_minus_adv + h2o_v_minus_adv
+ co2_molar_density + co2_mole_fraction + co2_mixing_ratio + h2o_molar_density
+ h2o_mole_fraction + h2o_mixing_ratio + sonic_temperature + air_temperature
+ air_pressure + air_density + air_heat_capacity + air_molar_volume + e + es
+ specific_humidity + VPD + Tdew + u_unrot + v_unrot + w_unrot + u_rot + v_rot
+ w_rot + max_speed + wind_dir + yaw + pitch + u_star_ + L + L_z_minus_dL__div_L
+ T_star_ + x_peak + x_offset + x_10_perc_ + x_30_perc_ + x_70_perc_ + un_Tau
+ Tau_scf + un_H + H_scf + un_LE + LE_scf + un_co2_flux + w_spikes + co2_spikes
+ h2o_spikes + u_var + v_var + co2_var + h2o_var + w_div_h2o_cov + co2 + h2o
+ co2_signal_strength_7200 + flowrate, data = teaching_tbl)
coef(mod2)
resid(mod2)
confint(mod2)
summary(mod2)
anova(mod2)
anova(mod2, mod1)
plot(mod2)
# МОДЕЛЬ 3
mod3 = lm ( h2o_flux~ DOY + file_records + Tau + qc_Tau + rand_err_Tau + H
+ qc_H + rand_err_H + LE + qc_LE + rand_err_LE + qc_h2o_flux
+ rand_err_co2_flux + co2_flux + rand_err_h2o_flux+ H_strg
+ co2_v_minus_adv + h2o_v_minus_adv + co2_molar_density
+ co2_mole_fraction + co2_mixing_ratio + h2o_molar_density, data = teaching_tbl)
coef(mod3)
resid(mod3)
confint(mod3)
summary(mod3)
anova(mod3)
anova(mod3, mod2)
plot(mod3)
co2_v_minus_adv, h2o_v_minus_adv, h2o_molar_density,
h2o_mole_fraction, h2o_mixing_ratio, co2_molar_density)
cor_td = cor(cor_teaching_tbl) %>% as.data.frame
qplot(h2o_flux , h2o_flux, data = teaching_tbl) + geom_line(aes(y = predict(mod3, teaching_tbl)))
qplot(h2o_flux , h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(DOY, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(Tau, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(h2o_flux, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(h2o_flux , h2o_flux, data = teaching_tbl) + geom_line(aes(y = predict(mod3, teaching_tbl)))
# МОДЕЛЬ 3
mod3 = lm ( h2o_flux~ DOY + file_records + Tau + qc_Tau + rand_err_Tau + H
+ qc_H + rand_err_H + LE + qc_LE + rand_err_LE + qc_h2o_flux
+ rand_err_co2_flux + co2_flux + rand_err_h2o_flux+ H_strg
+ co2_v_minus_adv + h2o_v_minus_adv + co2_molar_density
+ co2_mole_fraction + co2_mixing_ratio + h2o_molar_density, data = teaching_tbl)
coef(mod3)
resid(mod3)
confint(mod3)
summary(mod3)
anova(mod3)
anova(mod3, mod2)
plot(mod3)
cor_teaching_tbl = select(teaching_tbl, DOY, file_records, Tau, qc_Tau, rand_err_Tau, H,
qc_H, rand_err_H, LE, qc_LE, rand_err_LE, qc_co2_flux,
rand_err_co2_flux, co2_flux, rand_err_h2o_flux, H_strg,
co2_v_minus_adv, h2o_v_minus_adv, h2o_molar_density,
h2o_mole_fraction, h2o_mixing_ratio, co2_molar_density)
cor_td = cor(cor_teaching_tbl) %>% as.data.frame
qplot(h2o_flux , h2o_flux, data = teaching_tbl) + geom_line(aes(y = predict(mod3, teaching_tbl)))
qplot(h2o_flux , h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
cor_teaching_tbl = select(teaching_tbl, DOY,  file_records,  Tau,  qc_Tau,  rand_err_Tau,  H,
qc_H,  rand_err_H,  LE,  qc_LE,  rand_err_LE,  qc_h2o_flux,
rand_err_co2_flux,  co2_flux,  rand_err_h2o_flux, H_strg,
co2_v_minus_adv,  h2o_v_minus_adv,  co2_molar_density,
co2_mole_fraction,  co2_mixing_ratio,  h2o_molar_density)
cor_td = cor(cor_teaching_tbl) %>% as.data.frame
qplot(h2o_flux , h2o_flux, data = teaching_tbl) + geom_line(aes(y = predict(mod3, teaching_tbl)))
qplot(h2o_flux , h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(DOY, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(Tau, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(co2_flux, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
# МОДЕЛЬ 3
mod3 = lm ( h2o_flux~ DOY + file_records + Tau + qc_Tau + rand_err_Tau + H
+ qc_H + rand_err_H + LE + qc_LE + rand_err_LE + qc_h2o_flux
+ rand_err_co2_flux + co2_flux + rand_err_h2o_flux+ H_strg
+ co2_v_minus_adv + h2o_v_minus_adv + co2_molar_density
+ co2_mole_fraction + co2_mixing_ratio + h2o_molar_density, data = teaching_tbl)
coef(mod3)
resid(mod3)
confint(mod3)
summary(mod3)
anova(mod3)
anova(mod3, mod2)
plot(mod3)
co2_mole_fraction,  co2_mixing_ratio,  h2o_molar_density)
cor_td = cor(cor_teaching_tbl) %>% as.data.frame
qplot(h2o_flux , h2o_flux, data = teaching_tbl) + geom_line(aes(y = predict(mod3, teaching_tbl)))
qplot(h2o_flux , h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(DOY, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(Tau, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
# МОДЕЛЬ 3
mod3 = lm ( h2o_flux~ DOY + file_records + Tau + qc_Tau + rand_err_Tau + H
+ qc_H + rand_err_H + LE + qc_LE + rand_err_LE + qc_h2o_flux
+ rand_err_co2_flux + co2_flux + rand_err_h2o_flux+ H_strg
+ co2_v_minus_adv + h2o_v_minus_adv + co2_molar_density
+ co2_mole_fraction + co2_mixing_ratio + h2o_molar_density, data = teaching_tbl)
coef(mod3)
resid(mod3)
confint(mod3)
summary(mod3)
anova(mod3)
anova(mod3, mod2)
plot(mod3)
cor_teaching_tbl = select(teaching_tbl, DOY,  file_records,  Tau,  qc_Tau,  rand_err_Tau,  H,
qc_H,  rand_err_H,  LE,  qc_LE,  rand_err_LE,  qc_h2o_flux,
rand_err_co2_flux,  co2_flux,  rand_err_h2o_flux, H_strg,
co2_v_minus_adv,  h2o_v_minus_adv,  co2_molar_density,
co2_mole_fraction,  co2_mixing_ratio,  h2o_molar_density)
cor_td = cor(cor_teaching_tbl) %>% as.data.frame
qplot(h2o_flux , h2o_flux, data = teaching_tbl) + geom_line(aes(y = predict(mod3, teaching_tbl)))
qplot(h2o_flux , h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(DOY, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
# Гайдуков Сергей – для региона 28 рассчитайте урожайность пшеницы в 2011 году,
# взяв для рассчета средние суммы активных температур за предыдущие 5 лет, с метеостанций в радиусе не более 300 км
# Амурская область - 50.268549, 127.539079 - Благовещенск
# Подключим библиотеки:
library(tidyverse)
library(rnoaa)
library(lubridate)
# Создадим векторы с данными для расчета:
af = c(0.00,0.00,0.00,32.11, 26.31,25.64,23.20,18.73,16.30,13.83,0.00,0.00)
bf = c(0.00, 0.00, 0.00, 11.30, 9.26, 9.03,8.16, 6.59, 5.73, 4.87, 0.00, 0.00)
df = c(0.00,0.00, 0.00, 0.33, 1.00, 1.00, 1.00, 0.32, 0.00, 0.00, 0.00, 0.00)
Kf = 300 #  Коэффициент использования ФАР
Qj = 1600 # калорийность урожая культуры
Lj = 2.2 #  сумма частей основной и побочной продукции
Ej = 25 #   стандартная влажность культуры
# station_data = ghcnd_stations()
# write.csv(station_data, "station_data.csv")
station_data = read.csv("station_data.csv")
# Получим список метеостанций
blagoveshensk = data.frame(id = "BLAGOVESHCHENSK", latitude = 55.340206,  longitude = 86.061170)
#найдем станции, соответствующие критериям
blagoveshensk_around = meteo_nearby_stations(lat_lon_df = blagoveshensk, station_data = station_data,
radius = 300, var = "TAVG",
year_min = 2006, year_max = 2011)
#создадим таблицу
all_data = tibble()
for (i in 1:length(blagoveshensk_around))
{
# Определим станцию:
blagoveshensk_id = blagoveshensk_around[["BLAGOVESHCHENSK"]][["id"]][i]
# Загрузим данные для станции:
data = meteo_tidy_ghcnd(stationid = blagoveshensk_id,
var="TAVG",
date_min="2006-01-01",
date_max="2011-12-31")
#объединим данные в таблице
all_data = bind_rows(all_data, data %>%
#добавим колонки для группировки по году и месяцу
mutate(year = year(date), month = month(date)) %>%
group_by(month, year) %>%
#найдем суммарную среднюю активную температуру по месяцу за каждый год для станции
summarise (tavg = sum(tavg[tavg>50], na.rm = TRUE)/10 )
)
}
# Изменения в таблице сохранятся в векторе clean_data.
clean_data = all_data %>%
# Добавим колонку month для группировки данных:
group_by(month) %>%
# Найдем месячный d и cумму активных тмператур для каждой станции:
summarise(s = mean(tavg, na.rm = TRUE)) %>%
#добавим данные из таблицы с показателем d
# Добавим колонки для расчета:
mutate (a = af, b = bf, d = df) %>%
# Рассчитаем урожайность для каждого месяца:
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Благовещенске в 2011 году составила (ц/га):
Yield = sum(clean_data$fert); Yield
# Гайдуков Сергей – для региона 28 рассчитайте урожайность пшеницы в 2011 году,
# взяв для рассчета средние суммы активных температур за предыдущие 5 лет, с метеостанций в радиусе не более 300 км
# Амурская область - 50.268549, 127.539079 - Благовещенск
# Подключим библиотеки:
library(tidyverse)
library(rnoaa)
library(lubridate)
# Создадим векторы с данными для расчета:
af = c(0.00,0.00,0.00,32.11, 26.31,25.64,23.20,18.73,16.30,13.83,0.00,0.00)
bf = c(0.00, 0.00, 0.00, 11.30, 9.26, 9.03,8.16, 6.59, 5.73, 4.87, 0.00, 0.00)
df = c(0.00,0.00, 0.00, 0.33, 1.00, 1.00, 1.00, 0.32, 0.00, 0.00, 0.00, 0.00)
Kf = 300 #  Коэффициент использования ФАР
Qj = 1600 # калорийность урожая культуры
Lj = 2.2 #  сумма частей основной и побочной продукции
Ej = 25 #   стандартная влажность культуры
# station_data = ghcnd_stations()
# write.csv(station_data, "station_data.csv")
station_data = read.csv("station_data.csv")
# Получим список метеостанций
blagoveshensk = data.frame(id = "BLAGOVESHCHENSK", latitude = 55.340206,  longitude = 86.061170)
#найдем станции, соответствующие критериям
blagoveshensk_around = meteo_nearby_stations(lat_lon_df = blagoveshensk, station_data = station_data,
radius = 300, var = "TAVG",
year_min = 2006, year_max = 2011)
#создадим таблицу
all_data = tibble()
for (i in 1:length(blagoveshensk_around))
{
# Определим станцию:
blagoveshensk_id = blagoveshensk_around[["BLAGOVESHCHENSK"]][["id"]][i]
# Загрузим данные для станции:
data = meteo_tidy_ghcnd(stationid = blagoveshensk_id,
var="TAVG",
date_min="2006-01-01",
date_max="2011-12-31")
#объединим данные в таблице
all_data = bind_rows(all_data, data %>%
#добавим колонки для группировки по году и месяцу
mutate(year = year(date), month = month(date)) %>%
group_by(month, year) %>%
#найдем суммарную среднюю активную температуру по месяцу за каждый год для станции
summarise (tavg = sum(tavg[tavg>50], na.rm = TRUE)/10 )
)
}
# Изменения в таблице сохранятся в векторе clean_data.
clean_data = all_data %>%
# Добавим колонку month для группировки данных:
group_by(month) %>%
# Найдем месячный d и cумму активных тмператур для каждой станции:
summarise(s = mean(tavg, na.rm = TRUE)) %>%
#добавим данные из таблицы с показателем d
# Добавим колонки для расчета:
mutate (a = af, b = bf, d = df) %>%
# Рассчитаем урожайность для каждого месяца:
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Благовещенске в 2011 году составила (ц/га):
Yield = sum(clean_data$fert); Yield
View(clean_data)
# Гайдуков Сергей – для региона 28 рассчитайте урожайность пшеницы в 2011 году,
# взяв для рассчета средние суммы активных температур за предыдущие 5 лет, с метеостанций в радиусе не более 300 км
# Амурская область - 50.268549, 127.539079 - Благовещенск
# Подключим библиотеки:
library(tidyverse)
library(rnoaa)
library(lubridate)
# Создадим векторы с данными для расчета:
af = c(0.00,0.00,0.00,32.11, 26.31,25.64,23.20,18.73,16.30,13.83,0.00,0.00)
bf = c(0.00, 0.00, 0.00, 11.30, 9.26, 9.03,8.16, 6.59, 5.73, 4.87, 0.00, 0.00)
df = c(0.00,0.00, 0.00, 0.33, 1.00, 1.00, 1.00, 0.32, 0.00, 0.00, 0.00, 0.00)
Kf = 300 #  Коэффициент использования ФАР
Qj = 1600 # калорийность урожая культуры
Lj = 2.2 #  сумма частей основной и побочной продукции
Ej = 25 #   стандартная влажность культуры
# station_data = ghcnd_stations()
# write.csv(station_data, "station_data.csv")
station_data = read.csv("station_data.csv")
# Получим список метеостанций
blagoveshensk = data.frame(id = "BLAGOVESHCHENSK", latitude = 55.340206,  longitude = 86.061170)
#найдем станции, соответствующие критериям
blagoveshensk_around = meteo_nearby_stations(lat_lon_df = blagoveshensk, station_data = station_data,
radius = 300, var = "TAVG",
year_min = 2006, year_max = 2011)
#создадим таблицу
all_data = tibble()
for (i in 1:length(blagoveshensk_around))
{
# Определим станцию:
blagoveshensk_id = blagoveshensk_around[["BLAGOVESHCHENSK"]][["id"]][i]
# Загрузим данные для станции:
data = meteo_tidy_ghcnd(stationid = blagoveshensk_id,
var="TAVG",
date_min="2006-01-01",
date_max="2011-12-31")
#объединим данные в таблице
all_data = bind_rows(all_data, data)
}
# Изменения в таблице сохранятся в векторе clean_data.
clean_data =   all_data %>%
# Группируем и находим  cумму активных температур :
mutate(year = year(date), month = month(date)) %>%
mutate(tavg = tavg/10) %>%
filter(tavg > 10) %>%
group_by(year, month, id) %>%
summarize(summ = sum(tavg, na.rm=TRUE)) %>%
group_by(month) %>%
summarize(s = mean(summ, na.rm = TRUE)) %>%
# Добавим колонки для расчета:
mutate (a = af, b = bf, d = df) %>%
# Рассчитаем урожайность для каждого месяца:
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Благовещенске в 2011 году составила (ц/га):
Yield = sum(clean_data$fert); Yield
View(all_data)
View(all_data)
clean_data =   all_data %>%
# Группируем и находим  cумму активных температур :
mutate(year = year(date), month = month(date)) %>%
mutate(tavg = tavg/10) %>%
filter(tavg > 10) %>%
group_by(year, month, id) %>%
summarize(summ = sum(tavg, na.rm=TRUE)) %>%
group_by(month) %>%
summarize(s = mean(summ, na.rm = TRUE)) %>%
# Добавим колонки для расчета:
mutate (a = af, b = bf, d = df) #%>%
clean_data =   all_data %>%
# Группируем и находим  cумму активных температур :
mutate(year = year(date), month = month(date)) %>%
mutate(tavg = tavg/10) %>%
filter(tavg > 10) %>%
group_by(year, month, id) %>%
summarize(summ = sum(tavg, na.rm=TRUE)) %>%
group_by(month) %>%
summarize(s = mean(summ, na.rm = TRUE))
View(clean_data)
# Гайдуков Сергей – для региона 28 рассчитайте урожайность пшеницы в 2011 году,
# взяв для рассчета средние суммы активных температур за предыдущие 5 лет, с метеостанций в радиусе не более 300 км
# Амурская область - 50.268549, 127.539079 - Благовещенск
# Подключим библиотеки:
library(tidyverse)
library(rnoaa)
library(lubridate)
# Создадим векторы с данными для расчета:
af = c(0.00,0.00,0.00,32.11, 26.31,25.64,23.20,18.73,16.30,13.83,0.00,0.00)
bf = c(0.00, 0.00, 0.00, 11.30, 9.26, 9.03,8.16, 6.59, 5.73, 4.87, 0.00, 0.00)
df = c(0.00,0.00, 0.00, 0.33, 1.00, 1.00, 1.00, 0.32, 0.00, 0.00, 0.00, 0.00)
Kf = 300 #  Коэффициент использования ФАР
Qj = 1600 # калорийность урожая культуры
Lj = 2.2 #  сумма частей основной и побочной продукции
Ej = 25 #   стандартная влажность культуры
# station_data = ghcnd_stations()
# write.csv(station_data, "station_data.csv")
station_data = read.csv("station_data.csv")
# Получим список метеостанций
blagoveshensk = data.frame(id = "BLAGOVESHCHENSK", latitude = 55.340206,  longitude = 86.061170)
#найдем станции, соответствующие критериям
blagoveshensk_around = meteo_nearby_stations(lat_lon_df = blagoveshensk, station_data = station_data,
radius = 300, var = "TAVG",
year_min = 2006, year_max = 2011)
#создадим таблицу
all_data = tibble()
for (i in 1:length(blagoveshensk_around))
{
# Определим станцию:
blagoveshensk_id = blagoveshensk_around[["BLAGOVESHCHENSK"]][["id"]][i]
# Загрузим данные для станции:
data = meteo_tidy_ghcnd(stationid = blagoveshensk_id,
var="TAVG",
date_min="2006-01-01",
date_max="2011-12-31")
#объединим данные в таблице
all_data = bind_rows(all_data, data)
}
# Изменения в таблице сохранятся в векторе clean_data.
clean_data =   all_data %>%
# Группируем и находим  cумму активных температур :
mutate(year = year(date), month = month(date)) %>%
mutate(tavg = tavg/10) %>%
filter(tavg > 10) %>%
group_by(year, month, id) %>%
summarize(summ = sum(tavg, na.rm=TRUE)) %>%
group_by(month) %>%
summarize(s = mean(summ, na.rm = TRUE)) %>%
# Добавим колонки для расчета:
mutate (a = af[min(month):max(month)], b = bf[min(month):max(month)], d = df[min(month):max(month)]) %>%
# Рассчитаем урожайность для каждого месяца:
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Благовещенске в 2011 году составила (ц/га):
Yield = sum(clean_data$fert); Yield
# Гайдуков Сергей создайте модель множественной линейной регрессии потоков дневных потоков
# паров воды за летний период 2013 года по данным измерений методом турбулентной пульсации
library("tidyverse")  #целая вселенная
library("readr")      #функция read_csv()
library("stringr")    #функция str_replace_all
library("dplyr")      #функции: filter(); arrange(); select(); mutate(); summarize(); group_by(); sample_n()
library("ggplot2")    #Графики функцией qplot()
#подключаем библиотеки
library("tidyverse")
library("stringr")
library("dplyr")
library("ggplot2")
#читаем данные из файла, пропускаем первую строку, заменяем текстовые 'NA', пустые и сгенерированные пороговые значения на NA, игнорируем строки с "["
eddypro = read_csv("eddypro.csv", skip = 1, na=c("","NA","-9999","-9999.0"), comment=c("["))
eddypro = eddypro[-1, ]
eddypro = select(eddypro, -(roll))
#преобразуем строковые значения в факторные
eddypro = eddypro %>% mutate_if(is.character, factor)
#заменяем конфликтующие знаки колонок
names(eddypro) = names(eddypro) %>%
str_replace_all("[!]", "_emph_") %>%
str_replace_all("[?]", "_quest_") %>%
str_replace_all("[*]", "_star_") %>%
str_replace_all("[+]", "_plus_") %>%
str_replace_all("[-]", "_minus_") %>%
str_replace_all("[@]", "_at_") %>%
str_replace_all("[$]", "_dollar_") %>%
str_replace_all("[#]", "_hash_") %>%
str_replace_all("[/]", "_div_") %>%
str_replace_all("[%]", "_perc_") %>%
str_replace_all("[&]", "_amp_") %>%
str_replace_all("[\\^]", "_power_") %>%
str_replace_all("[()]", "L_")
glimpse(eddypro)
# уберем na
eddypro = drop_na(eddypro)
#летний период, дневное время
eddypro = filter(eddypro, DOY >= 152 & DOY < 244)
eddypro = filter(eddypro, daytime==TRUE)
#переменные типов numeric и  не numeric отдельно
eddypro_numeric = eddypro[,sapply(eddypro,is.numeric) ]
eddypro_non_numeric = eddypro[,!sapply(eddypro,is.numeric) ]
#создадим выборки
row_numbers = 1:length(eddypro_numeric$h2o_flux)
teach = sample(row_numbers, floor(length(eddypro_numeric$h2o_flux)*.7))
test = row_numbers[-teach]
teaching_tbl = eddypro_numeric[teach,]
testing_tbl = eddypro_numeric[test,]
# МОДЕЛЬ 1 по обучающей выборке
mod1 = lm(h2o_flux~ (.) , data = teaching_tbl)
#коэффициенты
#коэффициенты
coef(mod1)
